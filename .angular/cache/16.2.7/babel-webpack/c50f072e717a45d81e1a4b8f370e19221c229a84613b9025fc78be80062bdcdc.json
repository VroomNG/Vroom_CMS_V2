{"ast":null,"code":"import { environment } from '../../environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChartService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.serverUrl;\n  }\n  getChartData() {\n    return this.http.get(`${this.baseUrl}/api/v1/adminViewChart`);\n  }\n  static #_ = this.ɵfac = function ChartService_Factory(t) {\n    return new (t || ChartService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChartService,\n    factory: ChartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","ChartService","constructor","http","baseUrl","serverUrl","getChartData","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/ikoi6/codingPs/vroom/Vroom_CMS_V2/src/app/service/chart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {environment} from '../../environments/environment.prod';\nimport { Observable } from 'rxjs';\nimport { IChart_data } from '../model/dashboardInfo';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartService {\n\n  private baseUrl = environment.serverUrl\n\n  constructor(public http: HttpClient) { }\n\n  getChartData(): Observable<IChart_data[]>{\n    return this.http.get<IChart_data[]>(`${this.baseUrl}/api/v1/adminViewChart`);\n  }\n  \n}\n\n\n// import { Injectable } from '@angular/core';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// // import { Configuration } from '../../configuration';\n// import { environment } from 'src/environments/environment.prod';\n// import { IChart_data } from '../model/dashboardInfo';\n// // import { DefaultUrlSerializer, Params } from '@angular/router';\n// import { Observable } from 'rxjs';\n\n// @Injectable()\n// export class chartService {\n\n//     private baseUrl = environment.serverUrl\n    \n//     // readonly httpOptions = {\n//     //     headers: new HttpHeaders({\n//     //         'Content-Type': 'application/json'\n//     //     })\n//     // };\n\n//     constructor(private http: HttpClient,\n//         //  private config: Configuration\n//          ) { }\n\n//     getChartData(): Observable<IChart_data[]>{\n//         return this.http.get<IChart_data[]>(`${this.baseUrl}/api/v1/adminViewChart`);\n//     }\n\n//     // getChartList(inputParameter: { [x: string]: any; token?: any; }) {\n//     //     debugger;\n//     //     const serializer = new DefaultUrlSerializer();\n//     //     const paramSerializer = serializer.parse('');\n//     //     paramSerializer.queryParams = inputParameter;\n//     //     const params = serializer.serialize(paramSerializer);\n//     //     return this.http.get(this.config.getChartDetail + params, this.httpOptions);\n//     // }\n\n//     // getDriverReportDetails(inputParameter: { [x: string]: any; token?: any; year?: any; filter?: any; status?: any; }) {\n//     //     debugger;\n//     //     const serializer = new DefaultUrlSerializer();\n//     //     const paramSerializer = serializer.parse('');\n//     //     paramSerializer.queryParams = inputParameter;\n//     //     const params = serializer.serialize(paramSerializer);\n//     //     return this.http.get(this.config.driverReportDetails + params, this.httpOptions);\n//     // }\n\n\n//     // getRiderReportDetails(inputParameter: { [x: string]: any; token?: any; year?: any; filter?: any; }) {\n//     //     debugger;\n//     //     const serializer = new DefaultUrlSerializer();\n//     //     const paramSerializer = serializer.parse('');\n//     //     paramSerializer.queryParams = inputParameter;\n//     //     const params = serializer.serialize(paramSerializer);\n//     //     return this.http.get(this.config.riderReportDetails + params, this.httpOptions);\n//     // }\n\n//     // getDriverRevenue(inputParameter: Params) {\n//     //     debugger;\n//     //     const serializer = new DefaultUrlSerializer();\n//     //     const paramSerializer = serializer.parse('');\n//     //     paramSerializer.queryParams = inputParameter;\n//     //     const params = serializer.serialize(paramSerializer);\n//     //     return this.http.get(this.config.driverRevenuesDetails + params, this.httpOptions);\n//     // }\n//     // getActiveDriverReport(inputParameter: { [x: string]: any; token?: any; year?: any; filter?: any; isactive?: string; isonline?: any; }) {\n//     //     debugger;\n//     //     const serializer = new DefaultUrlSerializer();\n//     //     const paramSerializer = serializer.parse('');\n//     //     paramSerializer.queryParams = inputParameter;\n//     //     const params = serializer.serialize(paramSerializer);\n//     //     return this.http.get(this.config.getActiveDriverReport + params, this.httpOptions);\n//     // }\n//     // getActiveRiderReport(inputParameter: { [x: string]: any; token?: any; year?: any; filter?: any; }) {\n//     //     debugger;\n//     //     const serializer = new DefaultUrlSerializer();\n//     //     const paramSerializer = serializer.parse('');\n//     //     paramSerializer.queryParams = inputParameter;\n//     //     const params = serializer.serialize(paramSerializer);\n//     //     return this.http.get(this.config.getActiveRiderReport + params, this.httpOptions);\n//     // }\n\n\n//     // // surge charge\n//     // // add surge\n//     // addSurgeCharge(inputParameter: { surgeSelected: any; charge: any; startTime: any; endTime: any; fromDate: any; city: string; chargeOption: number; ratio: string; latitude: any; longitude: any; }) {\n//     //     debugger;\n//     //     return this.http.post(this.config.addSurgePay, JSON.stringify(inputParameter), this.httpOptions);\n//     // }\n\n//     // // get all surge\n//     // getallSurge(inputParameter: { [x: string]: any; token?: any; }) {\n//     //     debugger;\n//     //     const serializer = new DefaultUrlSerializer();\n//     //     const paramSerializer = serializer.parse('');\n//     //     paramSerializer.queryParams = inputParameter;\n//     //     const params = serializer.serialize(paramSerializer);\n//     //     return this.http.get(this.config.getallSurgecharge + params, this.httpOptions);\n//     // }\n\n//     // updateSurgeCharge(inputParameter: { surgeSelected: string; charge: any; fromDate: any; startTime: any; endTime: any; city: string; chargeOption: number; ratio: string; latitude: any; longitude: any; }, id: string) {\n//     //     return this.http.put(this.config.editSurcharge + \"/\" + id, JSON.stringify(inputParameter), this.httpOptions);\n//     // }\n\n//     // // delete status\n//     // deleteSurge(id: string) {\n//     //     debugger;\n//     //     return this.http.delete(this.config.deleteSurgecharge + '/' + id, this.httpOptions);\n//     // }\n\n\n//     // // get all surge\n//     // getsingleSurge(id: string | number) {\n//     //     debugger;\n//     //     return this.http.get(this.config.getSingleSurcharge + \"/\" + id, this.httpOptions);\n\n//     // }\n//     // // Discount details\n//     // getallDiscount(inputParameter: { [x: string]: any; token?: any; }) {\n//     //     debugger;\n//     //     const serializer = new DefaultUrlSerializer();\n//     //     const paramSerializer = serializer.parse('');\n//     //     paramSerializer.queryParams = inputParameter;\n//     //     const params = serializer.serialize(paramSerializer);\n//     //     return this.http.get(this.config.getallDiscount + params, this.httpOptions);\n//     // }\n//     // addDiscount(inputParameter: { discount_code: any; title: any; description: any; start_date: any; end_date: any; discount_percent: any; max_discount_amount: any; max_no_of_users: any; }) {\n//     //     debugger;\n//     //     return this.http.post(this.config.getallDiscount, JSON.stringify(inputParameter), this.httpOptions);\n//     // }\n//     // // get all surge\n//     // getsingleDiscount(id: string | number) {\n//     //     debugger;\n//     //     return this.http.get(this.config.getallDiscount + \"/\" + id, this.httpOptions);\n\n//     // }\n//     // updateDiscount(inputParameter: { discount_code: any; title: any; description: any; start_date: any; end_date: any; discount_percent: any; max_discount_amount: any; max_no_of_users: any; }, id: string) {\n//     //     return this.http.put(this.config.getallDiscount + \"/\" + id, JSON.stringify(inputParameter), this.httpOptions);\n//     // }\n//     // deleteDiscount(id: string) {\n//     //     debugger;\n//     //     return this.http.delete(this.config.getallDiscount + '/' + id, this.httpOptions);\n//     // }\n//     // getRevenueReportDetails(inputParameter: { [x: string]: any; token?: any; year?: any; filter?: any; }) {\n//     //     debugger;\n//     //     const serializer = new DefaultUrlSerializer();\n//     //     const paramSerializer = serializer.parse('');\n//     //     paramSerializer.queryParams = inputParameter;\n//     //     const params = serializer.serialize(paramSerializer);\n//     //     return this.http.get(this.config.getRevenueReportDetails + params, this.httpOptions);\n//     // }\n\n// }"],"mappings":"AAEA,SAAQA,WAAW,QAAO,qCAAqC;;;AAO/D,OAAM,MAAOC,YAAY;EAIvBC,YAAmBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFf,KAAAC,OAAO,GAAGJ,WAAW,CAACK,SAAS;EAEA;EAEvCC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAgB,GAAG,IAAI,CAACH,OAAO,wBAAwB,CAAC;EAC9E;EAAC,QAAAI,CAAA,G;qBARUP,YAAY,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZZ,YAAY;IAAAa,OAAA,EAAZb,YAAY,CAAAc,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}