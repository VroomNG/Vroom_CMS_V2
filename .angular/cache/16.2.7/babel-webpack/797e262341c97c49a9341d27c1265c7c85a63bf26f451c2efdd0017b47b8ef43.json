{"ast":null,"code":"import { environment } from '../../environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NotificationService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.serverUrl;\n  }\n  getSchedules() {\n    return this.http.get(`${this.baseUrl}/api/v1/getSchedules`);\n  }\n  addNotify(addNotifyValue) {\n    return this.http.post(`${this.baseUrl}/api/v1/addNoteSchedule`, addNotifyValue);\n  }\n  static #_ = this.ɵfac = function NotificationService_Factory(t) {\n    return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","NotificationService","constructor","http","baseUrl","serverUrl","getSchedules","get","addNotify","addNotifyValue","post","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/ikoi6/codingPs/vroom/Vroom_CMS_V2/src/app/service/notifications.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {environment} from '../../environments/environment.prod';\nimport { Observable } from 'rxjs';\nimport { ISchedules } from '../model/notifications';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  private baseUrl = environment.serverUrl\n\n  constructor(public http: HttpClient) { }\n\n  getSchedules(): Observable<ISchedules[]>{\n    return this.http.get<ISchedules[]>(`${this.baseUrl}/api/v1/getSchedules`);\n  }\n  addNotify(addNotifyValue:any){\n    return this.http.post(`${this.baseUrl}/api/v1/addNoteSchedule`, addNotifyValue)\n  }\n \n}\n\n// import { Injectable } from '@angular/core';\n// import { HttpClient, HttpHeaders, HttpRequest, HttpEvent } from '@angular/common/http';\n// import { Configuration } from '../../configuration';\n// import { DefaultUrlSerializer } from '@angular/router';\n// import { Observable } from 'rxjs';\n// // import {RequestOptions} from '@angular/http';  \n// // import { map } from 'rxjs/operators'; \n// import { map } from 'rxjs/operators';\n// // import 'rxjs/add/operator/map'\n// @Injectable()\n// export class vehicleService {\n//   readonly httpOptions = {\n//     headers: new HttpHeaders({\n//       'Content-Type': 'application/json'\n//     })\n//   };\n//   constructor(private http: HttpClient, private config: Configuration) { }\n\n//   //   newEntryUser(userInput,inputParameter) {\n//   //     // debugger;\n//   //     const serializer = new DefaultUrlSerializer();\n//   //     const paramSerializer = serializer.parse('');\n//   //     paramSerializer.queryParams = inputParameter;\n//   //     const params = serializer.serialize(paramSerializer);\n//   //     return this.http.post(this.config.newEntryUser + params, JSON.stringify(userInput), this.httpOptions);\n//   //   }\n//   getVehicleList(inputParameter: { [x: string]: any; token?: any; }) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);\n//     return this.http.get(this.config.getVehicleDetail + params, this.httpOptions);\n//   }\n\n//   getSingleVehicle(id: string | number) {\n//     // debugger;\n//     // const serializer = new DefaultUrlSerializer();\n//     // const paramSerializer = serializer.parse('');\n//     // paramSerializer.queryParams = inputParameter;\n//     // const params = serializer.serialize(paramSerializer);\n//     return this.http.get(this.config.getSingleVehicleDetail + \"/\" + id, this.httpOptions);\n//   }\n//   updateVehicle(inputParameter: {\n//       vehicle_type: any; trip_type: string; per_km_rate: any; minimum_fare: any; commission: any; available_seat: any; cancel_charge_driver: any; cancel_charge_rider: any; isactive: string; description: any; per_minute_rate: any; base_fare: any; tolls_fees: any; peek_hour_fare: any;\n//       // import {RequestOptions} from '@angular/http';  \n//       // import { map } from 'rxjs/operators'; \n//       make: any; model: any; year: any; tax_percent: any;\n//       // import { map } from 'rxjs/operators'; \n//       per_km_rate_share: any; per_minute_rate_share: any; minimum_fare_share: any; base_fare_share: any; promo_status: any; max_fare_value: any;\n//     }, id: string) {\n//     debugger;\n//     return this.http.put(this.config.updateVehicle + '/' + id, JSON.stringify(inputParameter), this.httpOptions);\n\n//   }\n//   addVehicle(inputParameter: {\n//       vehicle_type: any; trip_type: string; per_km_rate: any; minimum_fare: any; commission: any; available_seat: any; cancel_charge_driver: any; cancel_charge_rider: any; isactive: string; description: any; per_minute_rate: any; base_fare: any; tolls_fees: any; peek_hour_fare: any;\n//       // import {RequestOptions} from '@angular/http';  \n//       // import { map } from 'rxjs/operators'; \n//       make: any; model: any; year: any; tax_percent: any;\n//       // import { map } from 'rxjs/operators'; \n//       per_km_rate_share: any; per_minute_rate_share: any; minimum_fare_share: any; base_fare_share: any;\n//     }) {\n//     debugger;\n//     return this.http.post(this.config.addVehicle, JSON.stringify(inputParameter), this.httpOptions);\n\n//   }\n//   deleteVehicle(id: string) {\n//     debugger;\n//     return this.http.delete(this.config.deleteVehicle + '/' + id, this.httpOptions);\n\n//   }\n//   updateVehicleType(inputParameter: { vehicle_type_id: string; }, id: string) {\n//     debugger;\n//     return this.http.put(this.config.updateVehicleType + '/' + id, JSON.stringify(inputParameter), this.httpOptions);\n//   }\n\n//   postFile(fileToUpload: File): Observable<boolean> {\n//     // postFile(id,fileToUpload) {\n//     debugger;\n//     // const endpoint = '/uploads/imageLin.png';\n\n//     let headersconf = new HttpHeaders();\n//     // headersconf.append('Content-Type', 'multipart/form-data');\n//     headersconf.append('Content-Type', 'undefined');\n\n//     const formData: FormData = new FormData();\n//     formData.append('fileKey', fileToUpload, fileToUpload.name);\n\n//     // return this.http.post(this.config.uploadLicense + '/' + id , JSON.stringify(formData), this.httpOptions);   \n//     return this.http\n//       .post(this.config.uploadLicense, formData, { headers: headersconf })\n\n//       .pipe(\n//         //   map((res) => res.data)),\n//         //   catchError(error => Observable.of(null))\n//         // );\n//         map(() => { return true; })\n//       );\n//   }\n\n//   // postFile(subUri: string, id: number, fileToUpload: File): Observable<any> {\n//   //   const formData: FormData = new FormData();\n//   //   formData.append('file', fileToUpload, fileToUpload.name);\n//   //   formData.append('photoalbum_id', id.toString());\n//   //   // ... some other .append()\n\n//   //   const customHeaders = new HttpHeaders({\n//   //     // 'Authorization': 'Bearer' + localStorage.getItem('token'),\n//   //     'Content-Type': 'multipart/form-data',\n//   //     'Accepted-Encoding': 'application/json'\n//   //   });\n\n//   //   const customOptions = {\n//   //     headers: customHeaders,\n//   //     reportProgress: true,\n//   //   };\n\n//   //   const req = new HttpRequest('POST', this.config.uploadLicense, formData, customOptions);\n\n//   //   // Call HttpClient.request with an HttpRequest as only param to get an observable of HttpEvents\n//   //   return this.http.request(req)\n//   //     .pipe(\n//   //       map((event: HttpEvent<any>) => this.getEventMessage(event)),\n//   //       catchError(this.handleError));\n//   // }\n\n//   // private getEventMessage(event: HttpEvent<any>) {\n//   //   // We are now getting events and can do whatever we want with them!\n//   //   console.log(event);\n//   // }\n\n//   uploadFiletoServer(file: File, staffId: string | number, filetype: string, leaveId: any) {\n//     const headertxt = new HttpHeaders();\n//     // const baseUrl = this.config.uploadLicense + '/' + staffId + '/' + filetype ;\n//     const baseUrl = this.config.uploadImageLincense + '/' + staffId;\n//     const formData: FormData = new FormData();\n//     formData.append('file', file);\n//     const req = new HttpRequest('POST', `${baseUrl}`, formData, {\n//       reportProgress: true,\n//       responseType: 'json',\n//       headers: headertxt\n//     });\n//     return this.http.request(req);\n//   }\n\n// }"],"mappings":"AAEA,SAAQA,WAAW,QAAO,qCAAqC;;;AAO/D,OAAM,MAAOC,mBAAmB;EAI9BC,YAAmBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFf,KAAAC,OAAO,GAAGJ,WAAW,CAACK,SAAS;EAEA;EAEvCC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAe,GAAG,IAAI,CAACH,OAAO,sBAAsB,CAAC;EAC3E;EACAI,SAASA,CAACC,cAAkB;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACN,OAAO,yBAAyB,EAAEK,cAAc,CAAC;EACjF;EAAC,QAAAE,CAAA,G;qBAXUV,mBAAmB,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnBf,mBAAmB;IAAAgB,OAAA,EAAnBhB,mBAAmB,CAAAiB,IAAA;IAAAC,UAAA,EAFlB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}