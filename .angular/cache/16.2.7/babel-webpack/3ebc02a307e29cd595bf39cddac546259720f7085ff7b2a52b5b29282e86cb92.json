{"ast":null,"code":"import { environment } from '../../environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PartnerService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.serverUrl;\n  }\n  addPartners(partnersForm) {\n    // const headers = new HttpHeaders({\n    //   'Content-Type': 'application/json',\n    //   'token': 'TOPSECRETE'\n    // });\n    return this.http.post(`${this.baseUrl}/addAdmin`, partnersForm);\n  }\n  getPartners() {\n    return this.http.get(`${this.baseUrl}/partners`);\n  }\n  getSinglePartners(partnerId) {\n    return this.http.get(`${this.baseUrl}/users/${partnerId}`);\n  }\n  deletePartner(partnerId) {\n    return this.http.delete(`${this.baseUrl}/users/${partnerId}`);\n  }\n  updatePartner(editPartnerForm, partnerId) {\n    return this.http.put(`${this.baseUrl}/updateUser/${partnerId}`, editPartnerForm);\n  }\n  static #_ = this.ɵfac = function PartnerService_Factory(t) {\n    return new (t || PartnerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PartnerService,\n    factory: PartnerService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","PartnerService","constructor","http","baseUrl","serverUrl","addPartners","partnersForm","post","getPartners","get","getSinglePartners","partnerId","deletePartner","delete","updatePartner","editPartnerForm","put","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/ikoi6/codingPs/vroom/Vroom_CMS_V2/src/app/service/partners.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport {environment} from '../../environments/environment.prod';\nimport { Observable } from 'rxjs';\nimport { IPartners } from '../model/partners';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PartnerService {\n\n  private baseUrl = environment.serverUrl\n\n  constructor(public http: HttpClient) { }\n\n  addPartners(partnersForm:any){\n    // const headers = new HttpHeaders({\n    //   'Content-Type': 'application/json',\n    //   'token': 'TOPSECRETE'\n    // });\n    return this.http.post(`${this.baseUrl}/addAdmin`, partnersForm)\n  }\n\n  getPartners(): Observable<IPartners[]>{\n    return this.http.get<IPartners[]>(`${this.baseUrl}/partners`);\n  }\n\n  getSinglePartners(partnerId: any): Observable<IPartners[]>{\n    return this.http.get<IPartners[]>(`${this.baseUrl}/users/${partnerId}`);\n  }\n\n  deletePartner(partnerId:any) {\n    return this.http.delete(`${this.baseUrl}/users/${partnerId}`);\n  }\n  \n  updatePartner(editPartnerForm: object, partnerId:any) {\n    return this.http.put(`${this.baseUrl}/updateUser/${partnerId}`, editPartnerForm);\n  }\n\n}\n\n\n"],"mappings":"AAEA,SAAQA,WAAW,QAAO,qCAAqC;;;AAO/D,OAAM,MAAOC,cAAc;EAIzBC,YAAmBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFf,KAAAC,OAAO,GAAGJ,WAAW,CAACK,SAAS;EAEA;EAEvCC,WAAWA,CAACC,YAAgB;IAC1B;IACA;IACA;IACA;IACA,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,OAAO,WAAW,EAAEG,YAAY,CAAC;EACjE;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAc,GAAG,IAAI,CAACN,OAAO,WAAW,CAAC;EAC/D;EAEAO,iBAAiBA,CAACC,SAAc;IAC9B,OAAO,IAAI,CAACT,IAAI,CAACO,GAAG,CAAc,GAAG,IAAI,CAACN,OAAO,UAAUQ,SAAS,EAAE,CAAC;EACzE;EAEAC,aAAaA,CAACD,SAAa;IACzB,OAAO,IAAI,CAACT,IAAI,CAACW,MAAM,CAAC,GAAG,IAAI,CAACV,OAAO,UAAUQ,SAAS,EAAE,CAAC;EAC/D;EAEAG,aAAaA,CAACC,eAAuB,EAAEJ,SAAa;IAClD,OAAO,IAAI,CAACT,IAAI,CAACc,GAAG,CAAC,GAAG,IAAI,CAACb,OAAO,eAAeQ,SAAS,EAAE,EAAEI,eAAe,CAAC;EAClF;EAAC,QAAAE,CAAA,G;qBA5BUjB,cAAc,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdtB,cAAc;IAAAuB,OAAA,EAAdvB,cAAc,CAAAwB,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}