{"ast":null,"code":"import { environment } from '../../environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DriversService {\n  // constructor\n  constructor(http) {\n    this.http = http;\n    // variables\n    this.baseUrl = environment.serverUrl;\n    this.user = 2;\n  }\n  // crud functions\n  addDrivers(addDrivers) {\n    return this.http.post(`${this.baseUrl}/addDriver`, addDrivers);\n  }\n  getDrivers() {\n    return this.http.get(`${this.baseUrl}/api/v1/driverView`);\n  }\n  getPending() {\n    return this.http.get(`${this.baseUrl}/api/v1/pendingDriver`);\n  }\n  updateDriver(editDriverForm, driverId) {\n    return this.http.put(`${this.baseUrl}/updateUser/${driverId}`, editDriverForm);\n  }\n  deleteDriver(driverId) {\n    return this.http.delete(`${this.baseUrl}/users/${driverId}`);\n  }\n  deleteDriverReview(driverId) {\n    return this.http.delete(`${this.baseUrl}/api/v1/deletedriverReview/${driverId}`);\n  }\n  getRejected() {\n    return this.http.get(`${this.baseUrl}/api/v1/pendingDriver`);\n  }\n  getDriversRatings() {\n    return this.http.get(`${this.baseUrl}/api/v1/driverReview/${this.user}`);\n  }\n  getSingleDriver(driverId) {\n    return this.http.get(`${this.baseUrl}/users/${driverId}`);\n  }\n  static #_ = this.ɵfac = function DriversService_Factory(t) {\n    return new (t || DriversService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DriversService,\n    factory: DriversService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","DriversService","constructor","http","baseUrl","serverUrl","user","addDrivers","post","getDrivers","get","getPending","updateDriver","editDriverForm","driverId","put","deleteDriver","delete","deleteDriverReview","getRejected","getDriversRatings","getSingleDriver","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/ikoi6/codingPs/vroom/Vroom_CMS_V2/src/app/service/driver.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {environment} from '../../environments/environment.prod';\nimport { Observable } from 'rxjs';\nimport { IApproved_Drivers, IPending, IRatings_D, IRejected } from '../model/driverInfo';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DriversService {\n// variables\n  private baseUrl = environment.serverUrl\n  private user = 2;\n\n  // constructor\n  constructor(public http: HttpClient) { }\n\n  // crud functions\n\n  addDrivers(addDrivers:any){\n    return this.http.post(`${this.baseUrl}/addDriver`, addDrivers)\n  }\n\n  getDrivers(): Observable<IApproved_Drivers[]>{\n    return this.http.get<IApproved_Drivers[]>(`${this.baseUrl}/api/v1/driverView`);\n  }\n\n  getPending(): Observable<IPending[]>{\n    return this.http.get<IPending[]>(`${this.baseUrl}/api/v1/pendingDriver`)\n  }\n\n  updateDriver(editDriverForm: object, driverId:any) {\n    return this.http.put(`${this.baseUrl}/updateUser/${driverId}`, editDriverForm);\n  }\n\n  deleteDriver(driverId:any) {\n    return this.http.delete(`${this.baseUrl}/users/${driverId}`);\n  }\n  deleteDriverReview(driverId:any) {\n    return this.http.delete(`${this.baseUrl}/api/v1/deletedriverReview/${driverId}`);\n  }\n\n  getRejected(): Observable<IRejected[]>{\n    return this.http.get<IRejected[]>(`${this.baseUrl}/api/v1/pendingDriver`)\n  }\n  getDriversRatings(): Observable<IRatings_D[]>{\n    return this.http.get<IRatings_D[]>(`${this.baseUrl}/api/v1/driverReview/${this.user}`);\n  }\n\n  getSingleDriver(driverId: any): Observable<any>{\n    return this.http.get<any>(`${this.baseUrl}/users/${driverId}`);\n  }\n\n}\n\n\n// import { Injectable } from '@angular/core';\n// import { HttpClient, HttpHeaders,HttpRequest, HttpEvent } from '@angular/common/http';\n// import { Configuration } from '../../configuration';\n// import { DefaultUrlSerializer, Params } from '@angular/router';\n\n// @Injectable()\n// export class driverService {\n//   readonly httpOptions = {\n//     headers: new HttpHeaders({\n//       'Content-Type': 'application/json'\n//     })\n//   };\n//   constructor(private http: HttpClient, private config: Configuration) { }\n\n// //   newEntryUser(userInput,inputParameter) {\n// //     // debugger;\n// //     const serializer = new DefaultUrlSerializer();\n// //     const paramSerializer = serializer.parse('');\n// //     paramSerializer.queryParams = inputParameter;\n// //     const params = serializer.serialize(paramSerializer);\n// //     return this.http.post(this.config.newEntryUser + params, JSON.stringify(userInput), this.httpOptions);\n// //   }\n// getDriverList(inputParameter: { [x: string]: any; token?: any; isonline?: any; fil?: any; year?: any; filter?: any; },statusId: number) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);\n//     if(statusId == 3)\n//     return this.http.get(this.config.getDriverInactiveDetail+ params, this.httpOptions); \n//     else if(statusId == 2)\n//     return this.http.get(this.config.getPendingDetail+ params, this.httpOptions); \n//     else\n//     return this.http.get(this.config.getDriverDetail + params, this.httpOptions);        \n//   }\n\n//   getDriverReviewList(inputParameter: { [x: string]: any; token?: any; },user: string | number) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);\n  \n//     return this.http.get(this.config.getDriverReviewDetail + '/' + user + params, this.httpOptions);        \n//   }\n//   deleteDriverReview(inputParameter: { [x: string]: any; token?: any; },id: string) {    \n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);  \n//     return this.http.delete(this.config.deletedriverReview  + '/' + id + params, this.httpOptions);       \n//   }\n//   getDashboardList(inputParameter: { [x: string]: any; token?: any; }) {    \n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);   \n//     return this.http.get(this.config.getDashboardDetail + params, this.httpOptions);        \n//   }\n//   getDriverPayments(inputParameter: Params) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);    \n//     return this.http.get(this.config.getDriverPayments + params, this.httpOptions);        \n//   }\n//   getRiderPayments(inputParameter: { [x: string]: any; token?: any; }) {    \n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);    \n//     return this.http.get(this.config.getRiderPayments + params, this.httpOptions);        \n//   }\n   \n//   getDriverCurrentStatus(inputParameter: { [x: string]: any; token?: any; },id: string) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);\n  \n//     return this.http.get(this.config.getDriverCurrentStatus + '/' + id + params, this.httpOptions);        \n//   }\n//   getDriverFilter(inputParameter: { [x: string]: any; token?: any; isonline?: any; },filt: string) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);    \n//     return this.http.get(this.config.getDriverFilter +'/'+filt + params, this.httpOptions);        \n//   }\n//   getRiderReviewList(inputParameter: { [x: string]: any; token?: any; },user: string | number) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);\n  \n//     return this.http.get(this.config.getRiderReviewDetail + '/' + user + params, this.httpOptions);        \n//   }\n//   getDriverreportFilter(inputParameter: { [x: string]: any; token?: any; isonline?: any; fil?: any; year?: any; },filt: string) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);    \n//     return this.http.get(this.config.getDriverreportFilter +'/'+filt + params, this.httpOptions);        \n//   }\n//   getDriverListReport(inputParameter: { [x: string]: any; token?: any; isonline?: any; year?: any; filter?: any; },filt: string) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);    \n//     return this.http.get(this.config.getDriverListReport +'/'+filt + params, this.httpOptions);        \n//   }\n//   updateDriverPayments(inputParameter: { user_id: any[]; admin_transactionid: string; }) {\n//     debugger;\n//     return this.http.put(this.config.updateAdminpaid, JSON.stringify(inputParameter), this.httpOptions);\n//   }\n//   updateSettings(inputParameter: { radius?: string; threshold_amount?: string; max_days?: string; },inputToken: { [x: string]: any; token?: any; },id: string) {\n//     debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputToken;\n//     const params = serializer.serialize(paramSerializer);  \n//     return this.http.put(this.config.updateSettings+'/'+id+params, JSON.stringify(inputParameter), this.httpOptions);\n//   }\n//   getSettings(inputToken: { [x: string]: any; token?: any; }) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputToken;\n//     const params = serializer.serialize(paramSerializer);    \n//     return this.http.get(this.config.updateSettings + params, this.httpOptions);        \n//   }\n//   getDriverPayableList(inputToken: { [x: string]: any; token?: any; }) {\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputToken;\n//     const params = serializer.serialize(paramSerializer); \n//     return this.http.get(this.config.getDriverPayable+params, this.httpOptions);\n//   }\n//   uploadImagetoServer(file: File) {\n//     debugger;\n//     //const file = files.item(0);\n//     const headertxt = new HttpHeaders();\n//     // const baseUrl = this.config.uploadLicense + '/' + staffId + '/' + filetype ;\n//     const baseUrl = this.config.externalImages;\n//     const formData: FormData = new FormData();\n//     formData.append('file', file);\n//     const req = new HttpRequest('POST', `${baseUrl}`, formData, {\n//       reportProgress: true,\n//       responseType: 'json',\n//       headers: headertxt\n//     });\n//     return this.http.request(req);\n//   }\n \n// }\n"],"mappings":"AAEA,SAAQA,WAAW,QAAO,qCAAqC;;;AAO/D,OAAM,MAAOC,cAAc;EAKzB;EACAC,YAAmBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALzB;IACU,KAAAC,OAAO,GAAGJ,WAAW,CAACK,SAAS;IAC/B,KAAAC,IAAI,GAAG,CAAC;EAGuB;EAEvC;EAEAC,UAAUA,CAACA,UAAc;IACvB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,OAAO,YAAY,EAAEG,UAAU,CAAC;EAChE;EAEAE,UAAUA,CAAA;IACR,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAsB,GAAG,IAAI,CAACN,OAAO,oBAAoB,CAAC;EAChF;EAEAO,UAAUA,CAAA;IACR,OAAO,IAAI,CAACR,IAAI,CAACO,GAAG,CAAa,GAAG,IAAI,CAACN,OAAO,uBAAuB,CAAC;EAC1E;EAEAQ,YAAYA,CAACC,cAAsB,EAAEC,QAAY;IAC/C,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAC,GAAG,IAAI,CAACX,OAAO,eAAeU,QAAQ,EAAE,EAAED,cAAc,CAAC;EAChF;EAEAG,YAAYA,CAACF,QAAY;IACvB,OAAO,IAAI,CAACX,IAAI,CAACc,MAAM,CAAC,GAAG,IAAI,CAACb,OAAO,UAAUU,QAAQ,EAAE,CAAC;EAC9D;EACAI,kBAAkBA,CAACJ,QAAY;IAC7B,OAAO,IAAI,CAACX,IAAI,CAACc,MAAM,CAAC,GAAG,IAAI,CAACb,OAAO,8BAA8BU,QAAQ,EAAE,CAAC;EAClF;EAEAK,WAAWA,CAAA;IACT,OAAO,IAAI,CAAChB,IAAI,CAACO,GAAG,CAAc,GAAG,IAAI,CAACN,OAAO,uBAAuB,CAAC;EAC3E;EACAgB,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACjB,IAAI,CAACO,GAAG,CAAe,GAAG,IAAI,CAACN,OAAO,wBAAwB,IAAI,CAACE,IAAI,EAAE,CAAC;EACxF;EAEAe,eAAeA,CAACP,QAAa;IAC3B,OAAO,IAAI,CAACX,IAAI,CAACO,GAAG,CAAM,GAAG,IAAI,CAACN,OAAO,UAAUU,QAAQ,EAAE,CAAC;EAChE;EAAC,QAAAQ,CAAA,G;qBA1CUrB,cAAc,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd1B,cAAc;IAAA2B,OAAA,EAAd3B,cAAc,CAAA4B,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}