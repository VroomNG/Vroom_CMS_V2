{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsersService {\n  constructor(http) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.baseUrl = environment.serverUrl;\n    // response storage\n    this.loginResponseSubject = new BehaviorSubject(null);\n    this.loginResponse$ = this.loginResponseSubject.asObservable();\n    this.resetUserResponseSubject = new BehaviorSubject(null);\n    this.resetUserResponse$ = this.resetUserResponseSubject.asObservable();\n  }\n  setLoginResponse(response) {\n    this.loginResponseSubject.next(response);\n    console.log(response);\n    const res = JSON.stringify(response);\n    localStorage.setItem('userDetails', res);\n    return response;\n  }\n  setResetPasswordResponse(response) {\n    this.resetUserResponseSubject.next(response);\n    console.log(response);\n    const res = JSON.stringify(response);\n    localStorage.setItem('resetDetails', res);\n    return response;\n  }\n  getUserDetails() {\n    const response = this.loginResponseSubject.getValue();\n    console.log(response.lastname);\n    return response;\n  }\n  getStoredUserDetails() {\n    const storedUserDetails = localStorage.getItem('userDetails');\n    if (storedUserDetails) {\n      try {\n        const userDetails = JSON.parse(storedUserDetails);\n        return userDetails;\n      } catch (error) {\n        console.error('Error parsing user details from local storage:', error);\n      }\n    }\n    return null;\n  }\n  updateUser(updateUserForm, userId) {\n    return this.http.put(`${this.baseUrl}/updateUser/${userId}`, updateUserForm);\n  }\n  getSingleUser(userId) {\n    return this.http.get(`${this.baseUrl}/users/${userId}`);\n  }\n  changePassword(credentials, userId) {\n    return this.http.put(`${this.baseUrl}/changepassword/${userId}`, credentials);\n  }\n  forgotPassword(forgotPassForm, email) {\n    return this.http.put(`${this.baseUrl}/forgotPassword/${email}`, forgotPassForm);\n  }\n  forgotPasswordChange(credentials, email) {\n    return this.http.put(`${this.baseUrl}/forgotPasswordChange/${email}`, credentials);\n  }\n  verifyConfirmOTP(credentials, email) {\n    return this.http.post(`${this.baseUrl}/OTPVerified/${email}`, credentials);\n  }\n  addAccesstrail(userCredentials) {\n    return this.http.post(`${this.baseUrl}/addUserAccess`, userCredentials);\n  }\n  static #_ = this.ɵfac = function UsersService_Factory(t) {\n    return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsersService,\n    factory: UsersService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","HttpHeaders","environment","UsersService","constructor","http","httpOptions","headers","baseUrl","serverUrl","loginResponseSubject","loginResponse$","asObservable","resetUserResponseSubject","resetUserResponse$","setLoginResponse","response","next","console","log","res","JSON","stringify","localStorage","setItem","setResetPasswordResponse","getUserDetails","getValue","lastname","getStoredUserDetails","storedUserDetails","getItem","userDetails","parse","error","updateUser","updateUserForm","userId","put","getSingleUser","get","changePassword","credentials","forgotPassword","forgotPassForm","email","forgotPasswordChange","verifyConfirmOTP","post","addAccesstrail","userCredentials","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/ikoi6/codingPs/vroom/Vroom_CMS_V2/src/app/service/users.service.ts"],"sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport {environment} from '../../environments/environment.prod';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n\n  readonly httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };  \n\n  private baseUrl = environment.serverUrl\n\n  constructor(public http: HttpClient) { }\n\n   // response storage\n   private loginResponseSubject = new BehaviorSubject<any>(null);\n   loginResponse$ = this.loginResponseSubject.asObservable();\n\n   private resetUserResponseSubject = new BehaviorSubject<any>(null);\n   resetUserResponse$ = this.resetUserResponseSubject.asObservable();\n\n   setLoginResponse(response: any) {\n     this.loginResponseSubject.next(response);\n     console.log(response);\n     const res = JSON.stringify(response)\n     localStorage.setItem('userDetails',(res));\n     return response\n   }\n\n   setResetPasswordResponse(response:any){\n    this.resetUserResponseSubject.next(response);\n    console.log(response);\n    const res = JSON.stringify(response);\n    localStorage.setItem('resetDetails', (res))\n    return response\n   }\n \n    getUserDetails() {\n     const response = this.loginResponseSubject.getValue();\n     console.log(response.lastname)\n     return response;\n   }\n   getStoredUserDetails(): any {\n    const storedUserDetails = localStorage.getItem('userDetails');\n\n    if (storedUserDetails) {\n      try {\n        const userDetails = JSON.parse(storedUserDetails);\n        return userDetails;\n      } catch (error) {\n        console.error('Error parsing user details from local storage:', error);\n      }\n    }\n\n    return null;\n  }\n\n   updateUser(updateUserForm: object, userId:any) {\n    return this.http.put(`${this.baseUrl}/updateUser/${userId}`, updateUserForm);\n  }\n    getSingleUser(userId: any): Observable<any>{\n      return this.http.get<any>(`${this.baseUrl}/users/${userId}`);\n    }\n\n    changePassword(credentials: {old_pass: string; new_pass: string}, userId:any){\n      return this.http.put(`${this.baseUrl}/changepassword/${userId}`, credentials)\n    }\n    forgotPassword(forgotPassForm:any, email:any){\n      return this.http.put(`${this.baseUrl}/forgotPassword/${email}`, forgotPassForm)\n    }\n    forgotPasswordChange(credentials:{password:any, user_type:string}, email:any){\n      return this.http.put(`${this.baseUrl}/forgotPasswordChange/${email}`, credentials)\n    }\n    verifyConfirmOTP(credentials:{OTPcode:string, user_type: string}, email:any){\n      return this.http.post(`${this.baseUrl}/OTPVerified/${email}`, credentials )\n    }\n\n    addAccesstrail(userCredentials:any){\n      return this.http.post(`${this.baseUrl}/addUserAccess`, userCredentials)\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}