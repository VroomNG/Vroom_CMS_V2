{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SurgeService {\n  constructor(http) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.baseUrl = environment.serverUrl;\n  }\n  addSurge(surgeForm) {\n    return this.http.post(`${this.baseUrl}/api/v1/surge`, surgeForm);\n  }\n  updateSurgeParams(surgeForm) {\n    return this.http.put(`${this.baseUrl}/api/v1/updateSurgeParameters/`, surgeForm);\n  }\n  deleteSurge(surgeId) {\n    return this.http.delete(`${this.baseUrl}/api/v1/surge/${surgeId}`);\n  }\n  getSurge() {\n    return this.http.get(`${this.baseUrl}/api/v1/surge`);\n  }\n  // getSingleSurge(): Observable<ISurgeParams[]>{\n  //   return this.http.get<ISurgeParams[]>(`${this.baseUrl}/api/v1/getSurgeParameters`);\n  // }\n  getSurgeParams() {\n    return this.http.get(`${this.baseUrl}/api/v1/getSurgeParameters`);\n  }\n  static #_ = this.ɵfac = function SurgeService_Factory(t) {\n    return new (t || SurgeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SurgeService,\n    factory: SurgeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","SurgeService","constructor","http","httpOptions","headers","baseUrl","serverUrl","addSurge","surgeForm","post","updateSurgeParams","put","deleteSurge","surgeId","delete","getSurge","get","getSurgeParams","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/ikoi6/codingPs/vroom/Vroom_CMS_V2/src/app/service/surge.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport {environment} from '../../environments/environment.prod';\nimport { Observable } from 'rxjs';\nimport { ISurge, ISurgeParams } from '../model/surge';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SurgeService {\n\n  readonly httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };  \n\n  private baseUrl = environment.serverUrl\n  constructor(public http: HttpClient) { }\n\n  addSurge(surgeForm:any){\n    return this.http.post(`${this.baseUrl}/api/v1/surge`, surgeForm)\n  }\n  \n  updateSurgeParams(surgeForm: any) {\n    return this.http.put(`${this.baseUrl}/api/v1/updateSurgeParameters/`, surgeForm);\n  }\n\n  deleteSurge(surgeId:any) {\n    return this.http.delete(`${this.baseUrl}/api/v1/surge/${surgeId}`);\n  }\n\n  getSurge(): Observable<any>{\n    return this.http.get<any>(`${this.baseUrl}/api/v1/surge`);\n  }\n  // getSingleSurge(): Observable<ISurgeParams[]>{\n  //   return this.http.get<ISurgeParams[]>(`${this.baseUrl}/api/v1/getSurgeParameters`);\n  // }\n  getSurgeParams(): Observable<ISurgeParams[]>{\n    return this.http.get<ISurgeParams[]>(`${this.baseUrl}/api/v1/getSurgeParameters`);\n  } \n  \n}\n\n\n// import { Injectable } from '@angular/core';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { Configuration } from '../../configuration';\n// import { DefaultUrlSerializer, Params } from '@angular/router';\n\n// import { environment } from 'src/environments/environment.prod';\n\n// @Injectable()\n// export class adminService {\n//   readonly httpOptions = {\n//     headers: new HttpHeaders({\n//       'Content-Type': 'application/json'\n//     })\n//   };\n//   constructor(private http: HttpClient, private config: Configuration) { }\n\n//   private baseUrl = environment.serverUrl\n\n//   newEntryUser(userInput: any,inputParameter: Params) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);\n//     return this.http.post(this.config.newEntryUser + params, JSON.stringify(userInput), this.httpOptions);\n//   }\n// getAdminList(inputParameter: { [x: string]: any; token?: any; }) {\n//     // debugger;\n//     const serializer = new DefaultUrlSerializer();\n//     const paramSerializer = serializer.parse('');\n//     paramSerializer.queryParams = inputParameter;\n//     const params = serializer.serialize(paramSerializer);\n//     return this.http.get(this.config.getAdminDetail + params, this.httpOptions);        \n//   }\n\n//   getInformedUsers(id: string | number | null) {\n//     debugger;\n//     return this.http.get(this.config.getUserDetail+ '/' + id);          \n//   }\n\n//   updateUser(inputParameter: { firstname: any; lastname: any; email: any; city: string; phone_no: any; address: any; postal_code: any; about_me: any; profile_url: any; },id: string) {\n//     debugger;     \n//     return this.http.put(this.config.updateUserProfile + '/' + id , JSON.stringify(inputParameter), this.httpOptions);\n   \n//   }\n//   addAdmin(adminForm:any){\n//     return this.http.post(`${this.baseUrl}/addAdmin`, adminForm)\n//   }\n\n// }\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAQC,WAAW,QAAO,qCAAqC;;;AAO/D,OAAM,MAAOC,YAAY;EASvBC,YAAmBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPd,KAAAC,WAAW,GAAG;MACrBC,OAAO,EAAE,IAAIN,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;IAEO,KAAAO,OAAO,GAAGN,WAAW,CAACO,SAAS;EACA;EAEvCC,QAAQA,CAACC,SAAa;IACpB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACJ,OAAO,eAAe,EAAEG,SAAS,CAAC;EAClE;EAEAE,iBAAiBA,CAACF,SAAc;IAC9B,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACN,OAAO,gCAAgC,EAAEG,SAAS,CAAC;EAClF;EAEAI,WAAWA,CAACC,OAAW;IACrB,OAAO,IAAI,CAACX,IAAI,CAACY,MAAM,CAAC,GAAG,IAAI,CAACT,OAAO,iBAAiBQ,OAAO,EAAE,CAAC;EACpE;EAEAE,QAAQA,CAAA;IACN,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAM,GAAG,IAAI,CAACX,OAAO,eAAe,CAAC;EAC3D;EACA;EACA;EACA;EACAY,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACf,IAAI,CAACc,GAAG,CAAiB,GAAG,IAAI,CAACX,OAAO,4BAA4B,CAAC;EACnF;EAAC,QAAAa,CAAA,G;qBA/BUlB,YAAY,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZvB,YAAY;IAAAwB,OAAA,EAAZxB,YAAY,CAAAyB,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}